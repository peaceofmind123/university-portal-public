# Generated by Django 2.0.1 on 2018-01-21 15:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profiletype', models.CharField(max_length=400)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('description', models.CharField(max_length=2000, null=True)),
                ('published_date', models.DateField(auto_now_add=True, verbose_name='Published Date')),
                ('submission_deadline', models.DateField(verbose_name='Submission Deadline')),
                ('question_file', models.FileField(upload_to='assignments/questions', verbose_name='Question File')),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('batch_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='Batch ID')),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.CharField(max_length=2000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classdate', models.DateField()),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classplans', to='datarepo.Chapter')),
            ],
            options={
                'ordering': ('classdate',),
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('code', models.CharField(max_length=300, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=400)),
                ('totalmarks', models.PositiveIntegerField(default=100, verbose_name='Total marks')),
                ('profilepic', models.ImageField(upload_to='courses/')),
            ],
        ),
        migrations.CreateModel(
            name='Handout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('description', models.CharField(max_length=2000, null=True)),
                ('published_date', models.DateField(auto_now_add=True, verbose_name='Published Date')),
                ('classplan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='datarepo.ClassPlan')),
            ],
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('category', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=2000)),
                ('published_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-published_date',),
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=500)),
                ('category', models.CharField(max_length=500)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('redirect_url', models.CharField(max_length=500)),
            ],
            options={
                'ordering': ('-created_date',),
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks_obtained', models.PositiveIntegerField(default=8, null=True, verbose_name='Obtained Marks')),
            ],
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('stream_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('duration_years', models.PositiveIntegerField(default=4, verbose_name='Duration in years')),
                ('startingrollno', models.PositiveIntegerField(unique=True, verbose_name='Starting Roll number')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_file', models.FileField(upload_to='assignments/answers', verbose_name='Answer File')),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='datarepo.Assignment')),
            ],
        ),
        migrations.CreateModel(
            name='TempStudentUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=400, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=400, verbose_name='Surname')),
                ('email', models.EmailField(max_length=500, unique=True)),
                ('rollno', models.CharField(max_length=200)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unsigned_students', to='datarepo.Batch')),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unsigned_students', to='datarepo.Stream')),
            ],
            options={
                'verbose_name': 'Unsigned Student',
                'verbose_name_plural': 'Unsigned Students',
            },
        ),
        migrations.CreateModel(
            name='TempTeacherUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=400, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=400, verbose_name='Surname')),
                ('email', models.EmailField(max_length=500, unique=True)),
            ],
            options={
                'verbose_name': 'Unsigned Teacher',
                'verbose_name_plural': 'Unsigned Teachers',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('name', models.CharField(max_length=500)),
                ('fullmarks', models.PositiveIntegerField(default=20, verbose_name='Full marks')),
                ('test_id', models.CharField(max_length=300, primary_key=True, serialize=False)),
                ('chapters_to_study', models.ManyToManyField(related_name='featuring_tests', to='datarepo.Chapter')),
                ('classplan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='datarepo.ClassPlan')),
            ],
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Admin',
                'verbose_name_plural': 'Admins',
            },
            bases=('datarepo.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('rollno', models.CharField(max_length=200, unique=True)),
                ('profilepic', models.ImageField(upload_to='students/')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
            bases=('datarepo.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TeacherUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('profilepic', models.ImageField(upload_to='teachers/')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
            bases=('datarepo.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='result',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='datarepo.Test'),
        ),
        migrations.AddField(
            model_name='course',
            name='streams',
            field=models.ManyToManyField(related_name='courses', to='datarepo.Stream'),
        ),
        migrations.AddField(
            model_name='classplan',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classplans', to='datarepo.Course'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='datarepo.Course'),
        ),
        migrations.AddField(
            model_name='batch',
            name='streams',
            field=models.ManyToManyField(related_name='batches', to='datarepo.Stream'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='classplan',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='datarepo.ClassPlan'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='submission',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='datarepo.StudentUser'),
        ),
        migrations.AddField(
            model_name='studentuser',
            name='batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='datarepo.Batch'),
        ),
        migrations.AddField(
            model_name='studentuser',
            name='stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='datarepo.Stream'),
        ),
        migrations.AddField(
            model_name='result',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='datarepo.StudentUser'),
        ),
        migrations.AddField(
            model_name='notification',
            name='target_students',
            field=models.ManyToManyField(related_name='notifications', to='datarepo.StudentUser'),
        ),
        migrations.AddField(
            model_name='notification',
            name='target_teachers',
            field=models.ManyToManyField(related_name='notifications', to='datarepo.TeacherUser'),
        ),
        migrations.AddField(
            model_name='course',
            name='possible_teachers',
            field=models.ManyToManyField(related_name='teachable_courses', to='datarepo.TeacherUser'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(related_name='courses', to='datarepo.StudentUser'),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='datarepo.TeacherUser'),
        ),
    ]
